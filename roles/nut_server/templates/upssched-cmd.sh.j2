#!/bin/sh
DISCORD_WEBHOOK="{{ ups_discord_webhook }}"
NOISY_UPS="{{ noisy_ups }}"
 case $1 in
       onbatt)
          logger -t upssched-cmd "onbatt: UPS $UPSNAME running on battery"
          # skip sending the notifications if UPSNAME is the noisy UPS
            if [ "$UPSNAME" != "$NOISY_UPS" ]; then
               echo "{{ ansible_facts['nodename'] }} UPS $UPSNAME is on battery power" | mail {{ ups_email }}
               curl -s -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"{{ ansible_facts['nodename'] }} onbatt: UPS $UPSNAME is on battery power\"}" $DISCORD_WEBHOOK
            fi
          ;;
       online)
          logger -t upssched-cmd "online: UPS $UPSNAME running on line power"
          # skip sending the notifications if UPSNAME is the noisy UPS
            if [ "$UPSNAME" != "$NOISY_UPS" ]; then
               echo "{{ ansible_facts['nodename'] }} UPS $UPSNAME is back on line power" | mail {{ ups_email }}
               curl -s -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"{{ ansible_facts['nodename'] }} online: UPS $UPSNAME is back on main line power\"}" $DISCORD_WEBHOOK
            fi
          ;;
       lowbatt)
          logger -t upssched-cmd "lowbatt: UPS $UPSNAME is running on battery and battery is low"
          echo "{{ ansible_facts['nodename'] }} UPS is running on battery and battery is low" | mail {{ ups_email }}
          curl -s -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"{{ ansible_facts['nodename'] }} lowbatt: UPS is low battery \"}" $DISCORD_WEBHOOK
          ;;
       onbattlong)
          logger -t upssched-cmd "onbattlong: UPS $UPSNAME running on battery for too long, executing a clean shutdown"
          echo "{{ ansible_facts['nodename'] }} UPS $UPSNAME running on battery for too long, executing a clean shutdown" | mail {{ ups_email }}
          curl -s -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"{{ ansible_facts['nodename'] }} onbattlong: UPS $UPSNAME on battery for too long, shutting down\"}" $DISCORD_WEBHOOK
          {% if shutdown_gateway is defined and shutdown_gateway is true %}
          logger -t uspsched-cmd "Shutting down gateway"
          ssh -i /etc/nut/ssh_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ unifi_user }}@{{ unifi_ip }} "shutdown -h now"
          # open question: will this block waiting for the shutdown to complete or will it return immediately?
          # i suspect it returns immediately as the shutdown should terminate the SSH connection even if it takes the gateway awhile to shutdown
          {% endif %}
          logger -t uspsched-cmd "Sleeping for 60s then Shutting down UPS $UPSNAME"
          sleep 60 && /usr/sbin/upsmon -c fsd
          ;;
       powerdown)
          logger -t upssched-cmd "powerdown: upssched called powerdown()"
          echo "{{ ansible_facts['nodename'] }} UPS $UPSNAME invoked powerdown, executing a clean shutdown" | mail {{ ups_email }}
          curl -s -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"{{ ansible_facts['nodename'] }} powerdown: UPS $UPSNAME invoked powerdown, executing a clean shutdown\"}" $DISCORD_WEBHOOK
          {% if shutdown_gateway is defined and shutdown_gateway is true %}
          logger -t uspsched-cmd "Shutting down gateway"
          echo "{{ ansible_facts['nodename'] }} UPS $UPSNAME invoked powerdown, shutting down gateway" | mail {{ ups_email }}
          curl -s -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"{{ ansible_facts['nodename'] }} powerdown: UPS $UPSNAME invoked powerdown, shutting down gateway\"}" $DISCORD_WEBHOOK
          ssh -i /etc/nut/ssh_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ unifi_user }}@{{ unifi_ip }} "shutdown -h now"
          # open question: will this block waiting for the shutdown to complete or will it return immediately?
          # i suspect it returns immediately as the shutdown should terminate the SSH connection even if it takes the gateway awhile to shutdown
          {% endif %}
          # not calling upsmon -c fsd here because powerdown() is called by upsmon -c fsd
          ;;
       commbad)
          logger -t upssched-cmd "Lost connection to UPS $UPSNAME"
          echo "{{ ansible_facts['nodename'] }} Lost connection to UPS $UPSNAME" | mail {{ ups_email }}
          curl -s -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"{{ ansible_facts['nodename'] }} commbad: lost connection to UPS $UPSNAME \"}" $DISCORD_WEBHOOK
          ;;
       commok)
          logger -t upssched-cmd "Regained connection to UPS $UPSNAME"
          echo "{{ ansible_facts['nodename'] }} Regained connection to UPS $UPSNAME" | mail {{ ups_email }}
          curl -s -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"{{ ansible_facts['nodename'] }} commbad: regained connection to UPS $UPSNAME \"}" $DISCORD_WEBHOOK
          ;;
        replbatt)
          logger -t upssched-cmd "UPS battery needs to be replaced on UPS $UPSNAME"
          echo "{{ ansible_facts['nodename'] }} UPS battery needs to be replaced on UPS $UPSNAME" | mail {{ ups_email }}
          curl -s -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"{{ ansible_facts['nodename'] }} replbatt: UPS $UPSNAME needs battery replacement \"}" $DISCORD_WEBHOOK
          ;;
       *)
          logger -t upssched-cmd "Unrecognized command: $1"
          ;;
 esac

