# MONITOR system powervalue username password type
# Each UPS that you need to be monitor should have a MONITOR line. Not all of these need supply power to the system that is running upsmon. You may monitor other systems if you want to be able to send notifications about status changes on them.
#MONITOR ups@{{ nut_server_ip }}:{{ nut_port }} 1 upsmonitor {{ ups_password }} slave
MONITOR ups@{{ nut_server_ip }}:{{ nut_port }} 1 monuser secret slave
# Set the number of power supplies that must be receiving power to keep this system running. Normal computers have just one power supply, so the default value of 1 is acceptable.
# Large/expensive server type systems usually have more, and can run with a few missing. The HP NetServer LH4 can run with 2 out of 4, for example, so you’d set it to 2. The idea is to keep the box running as long as possible, right?
# Obviously you have to put the redundant supplies on different UPS circuits for this to make sense! 
MINSUPPLIES 1

# upsmon runs this command when the system needs to be brought down. 
SHUTDOWNCMD "/sbin/shutdown -h +0"

# upsmon calls this to send messages when things happen.
# This command is called with the full text of the message as one argument. The environment string NOTIFYTYPE will contain the type string of whatever caused this event to happen.
NOTIFYCMD /usr/sbin/upssched


# Normally upsmon polls the upsd(8) server every 5 seconds. If this is flooding your network with activity, you can make it higher. You can also make it lower to get faster updates in some cases.
# There are some catches. First, if you set the POLLFREQ too high, you may miss short-lived power events entirely. You also risk triggering the DEADTIME (see above) if you use a very large number.
# Second, there is a point of diminishing returns if you set it too low. While upsd normally has all of the data available to it instantly, most drivers only refresh the UPS status once every 2 seconds. Polling any more than that usually doesn’t get you the information any faster.
POLLFREQ 5

# This is the interval that upsmon waits between polls if any of its UPSes are on battery. You can use this along with POLLFREQ above to slow down polls during normal behavior, but get quicker updates when something bad happens.
# This should always be equal to or lower than the POLLFREQ value. By default it is also set 5 seconds.
# The warnings from the POLLFREQ entry about too-high and too-low values also apply here.
POLLFREQALERT 5

# upsmon will wait up to this many seconds in primary mode for the secondaries to disconnect during a shutdown situation. By default, this is 15 seconds.
HOSTSYNC 15

# upsmon allows a UPS to go missing for this many seconds before declaring it "dead". The default is 15 seconds.
# upsmon requires a UPS to provide status information every few seconds (see POLLFREQ and POLLFREQALERT) to keep things updated. If the status fetch fails, the UPS is marked stale. If it stays stale for more than DEADTIME seconds, the UPS is marked dead.
# A dead UPS that was last known to be on battery is assumed to have changed to a low battery condition. This may force a shutdown if it is providing a critical amount of power to your system. This seems disruptive, but the alternative is barreling ahead into oblivion and crashing when you run out of power.
# Note: DEADTIME should be a multiple of POLLFREQ and POLLFREQALERT. Otherwise, you’ll have "dead" UPSes simply because upsmon isn’t polling them quickly enough. Rule of thumb: take the larger of the two POLLFREQ values, and multiply by 3.

# setting higher DEADTIME to prevent disconnects on cyber power UPS
# see https://raspberrypi.stackexchange.com/questions/66611/nut-cyberpower-data-stale
DEADTIME 30
#DEADTIME 15


# POWERDOWNFLAG filename
# upsmon creates this file when running in primary mode when the UPS needs to be powered off. You should check for this file in your shutdown scripts and call upsdrvctl shutdown if it exists.
# This is done to forcibly reset the secondary systems, so they don’t get stuck at the "halted" stage even if the power returns during the shutdown process. This usually does not work well on contact-closure UPSes that use the genericups driver.
POWERDOWNFLAG /etc/killpower

# RBWARNTIME seconds
# When a UPS says that it needs to have its battery replaced, upsmon will generate a NOTIFY_REPLBATT event. By default, this happens every 43200 seconds (12 hours).
RBWARNTIME 43200

# NOCOMMWARNTIME seconds
# upsmon will trigger a NOTIFY_NOCOMM after this many seconds if it can’t reach any of the UPS entries in this configuration file. It keeps warning you until the situation is fixed. By default this is 300 seconds.
NOCOMMWARNTIME 300

# FINALDELAY seconds
# When running in primary mode, upsmon waits this long after sending the NOTIFY_SHUTDOWN to warn the users. After the timer elapses, it then runs your SHUTDOWNCMD. By default this is set to 5 seconds.
# If you need to let your users do something in between those events, increase this number. Remember, at this point your UPS battery is almost depleted, so don’t make this too big.
# Alternatively, you can set this very low so you don’t wait around when it’s time to shut down. Some UPSes don’t give much warning for low battery and will require a value of 0 here for a safe shutdown.
FINALDELAY 5

NOTIFYMSG ONLINE    "UPS %s on line power"
NOTIFYMSG ONBATT    "UPS %s on battery"
NOTIFYMSG LOWBATT   "UPS %s battery is low"
NOTIFYMSG FSD       "UPS %s: forced shutdown in progress"
NOTIFYMSG COMMOK    "Communications with UPS %s established"
NOTIFYMSG COMMBAD   "Communications with UPS %s lost"
NOTIFYMSG SHUTDOWN  "Auto logout and shutdown proceeding"
NOTIFYMSG REPLBATT  "UPS %s battery needs to be replaced"
NOTIFYMSG NOCOMM    "UPS %s is unavailable"
NOTIFYMSG NOPARENT  "upsmon parent process died - shutdown impossible"

NOTIFYFLAG ONLINE   SYSLOG+EXEC
NOTIFYFLAG ONBATT   SYSLOG+EXEC
NOTIFYFLAG LOWBATT  SYSLOG+EXEC
NOTIFYFLAG FSD      SYSLOG+EXEC
NOTIFYFLAG COMMOK   SYSLOG+EXEC
NOTIFYFLAG COMMBAD  SYSLOG+EXEC
NOTIFYFLAG SHUTDOWN SYSLOG+EXEC
NOTIFYFLAG REPLBATT SYSLOG+EXEC
NOTIFYFLAG NOCOMM   SYSLOG+EXEC
NOTIFYFLAG NOPARENT SYSLOG

